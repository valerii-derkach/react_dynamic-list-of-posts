{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comment.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","getAllPosts","a","fetch","response","json","getUserPosts","userId","getPostDetails","postId","PostsList","selectedUserId","selectedPostId","setSelectedPostId","useState","posts","setPosts","useEffect","then","postsFromServer","className","map","post","title","id","type","onClick","getPostComments","deleteComment","commentId","method","addComment","newComment","headers","body","JSON","stringify","NewCommentForm","commentsGetter","name","setName","email","setEmail","setBody","submitter","event","preventDefault","onSubmit","value","onChange","target","placeholder","PostDetails","setPost","comments","setComments","isVisible","setIsVisible","commentsFromServer","postDetailsGetter","postFromServer","deleteHandler","refreshedComments","comment","getUsers","App","users","setUsers","setSelectedUserId","usersFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c4601e1.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport { getAllPosts, getUserPosts } from '../../api/posts';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUserId: number,\n  selectedPostId: number,\n  setSelectedPostId: (id: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId, selectedPostId, setSelectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      getAllPosts()\n        .then(postsFromServer => setPosts(postsFromServer));\n    } else {\n      getUserPosts(selectedUserId)\n        .then(postsFromServer => setPosts(postsFromServer));\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        data-cy=\"postDetails\"\n        className=\"PostsList__list\"\n      >\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id\n              ? (\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setSelectedPostId(0);\n                  }}\n                  className=\"PostsList__button button button-active\"\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setSelectedPostId(post.id);\n                  }}\n                  className=\"PostsList__button button\"\n                >\n                  Open\n                </button>\n              ) }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\nimport { NewComment } from '../react-app-env';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' });\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(newComment),\n    });\n\n  return response.json();\n};\n","import React, { FormEvent, useState } from 'react';\nimport { NewComment } from '../../react-app-env';\nimport { addComment } from '../../api/comment';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPostId: number,\n  commentsGetter: () => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId, commentsGetter,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const submitter = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newComment: NewComment = {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    await addComment(newComment);\n    commentsGetter();\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitter}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Post, Comment } from '../../react-app-env';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comment';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVisible, setIsVisible] = useState(true);\n\n  const commentsGetter = async () => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  };\n\n  const postDetailsGetter = async () => {\n    const postFromServer = await getPostDetails(selectedPostId);\n\n    setPost(postFromServer);\n  };\n\n  useEffect(() => {\n    commentsGetter();\n    postDetailsGetter();\n  }, [selectedPostId]);\n\n  const deleteHandler = async (id: number) => {\n    await deleteComment(id);\n    const refreshedComments = await getPostComments(selectedPostId);\n\n    setComments(refreshedComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsVisible(!isVisible);\n          }}\n        >\n          {isVisible ? 'Hide comments' : 'Show comments'}\n        </button>\n        {isVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    deleteHandler(comment.id);\n                  }}\n                  className=\"PostDetails__remove-button button\"\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            commentsGetter={commentsGetter}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { User } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            onChange={selectHandler}\n            className=\"App__user-selector\"\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )\n            : <span>No details</span>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}